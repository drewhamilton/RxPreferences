apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

ext.artifact = 'rxpreferences-dagger'
apply from: 'publish.gradle'

android {
    compileSdkVersion targetSdk

    defaultConfig {
        minSdkVersion minSdk
        targetSdkVersion targetSdk
        versionName libraryVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file(keystore)
            storePassword keystorePassword
            keyAlias keyAlias
            keyPassword keyPassword
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    api project(':rxpreferences')

    implementation 'com.google.dagger:dagger:2.24'
    kapt 'com.google.dagger:dagger-compiler:2.24'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-inline:2.28.2'

    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

// TODO WORKAROUND: Get this to work in its own file
//region Compatibility
configurations {
    baseline
    latest
}

dependencies {
    baseline("drewhamilton.rxpreferences:$artifact:$compatibleVersion") {
        transitive false
        force true
        exclude module: 'rxpreferences'
    }
    latest(project(path: ":$project.name", configuration: 'releaseRuntimeElements')) {
        exclude module: 'rxpreferences'
    }
}

apply plugin: 'me.champeau.gradle.japicmp'
//noinspection UnnecessaryQualifiedReference
task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask) {
    oldClasspath = configurations.baseline.incoming.artifactView { config ->
        config.attributes { container ->
            container.attribute(Attribute.of("artifactType", String.class), "jar")
        }
    }.artifacts.artifactFiles

    newClasspath = configurations.latest.incoming.artifactView { config ->
        config.attributes { container ->
            container.attribute(Attribute.of("artifactType", String.class), "jar")
        }
    }.artifacts.artifactFiles

    onlyBinaryIncompatibleModified true
    failOnModification failIfIncompatible
    txtOutputFile = file("$buildDir/reports/japi.txt")

    // TODO WORKAROUND: JApiCmp can't find dagger.internal.Factory for some reason
    ignoreMissingClasses true
}

check.dependsOn(japicmp)
build.dependsOn(check)
//endregion
